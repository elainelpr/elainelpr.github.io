<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Welcome To My Website</title>
    <url>/2022/01/03/Welcome-To-My-Website-1/</url>
    <content><![CDATA[<font face=Times New Roman>
<font size=5>
This is my personal website and it is my first time to try to do it. Usually, I will share and write articals about SDE and other areas in computer science that I am interested. I am a green hand in CS area, if someone read my article and find mistakes, welcome to tell me and we can discuss it together.
]]></content>
      <tags>
        <tag>-Welcome</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Note</title>
    <url>/2022/01/07/Django/</url>
    <content><![CDATA[<font size=4>
<font face=Times New Roman>

<p>本文是基于<a href="https://b23.tv/Tga4ZV8">django入门</a>和<a href="https://b23.tv/hWiSZ8V">适合零基础小白的Django教程</a>学习笔记</p>
<h1 id="Djngo"><a href="#Djngo" class="headerlink" title="Djngo"></a>Djngo</h1><h2 id="1-Web-前端开发介绍"><a href="#1-Web-前端开发介绍" class="headerlink" title="1 Web 前端开发介绍"></a>1 Web 前端开发介绍</h2><p>在web开发中所编写的服务器端的程序的目的是为了动态地生成网页（HTML组成），使用浏览器访问即可看到效果</p>
<ol>
<li><p>什么是客户端（浏览器端，前端），什么是移动端，什么是服务器端？<br>(1) 客户端：直接面向客户的一端叫做前端，基于web开发的叫做web前端（制作的网站:打开淘宝，京东等,使用手机访问）<br>(2) 手机，平板电脑等是移动端</p>
</li>
<li><p>什么是服务器，什么是云服务器</p>
</li>
<li><p>Web的工作原理<br><img src="/2022/01/07/Django/Web.png" alt="img"><br>(1) 打开电脑，输入网址–&gt;回车相当于向服务器发出请求。<br>(2) 通过域名或IP地址找到服务器，发出请求<br>(3) 服务器根据请求地址和请求方式找到对应的内容(ex:想访问某些商品信息，服务器在数据库中找到对应的商品信息–&gt;相应给客户端浏览器上)<br><img src="/2022/01/07/Django/web2.png" alt="img"><br>负载均衡负责分发，每次请求时，负责找到合适的服务器做相应</p>
</li>
<li><p>HTTP 协议</p>
</li>
</ol>
<h2 id="2-HTML基础语法"><a href="#2-HTML基础语法" class="headerlink" title="2 HTML基础语法"></a>2 HTML基础语法</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span>  </span><br><span class="line">             <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span>  <span class="comment">&lt;!--网页标题--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://peiruliu.cn/&quot;</span>&gt;</span>我的个人网站<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">             </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>有两部分</li>
</ul>
<ol>
<li>&lt; !DOCTYPES html &gt; : 类型</li>
<li>每个网页的开头都有<html>, 结尾是</html><br>(1) head:<br>(2) body:网页的内容呈现都在body里面</li>
</ol>
<ul>
<li>注释<br>&lt; !– 唯一的HTML注释 –&gt;</li>
</ul>
<h3 id="2-1-HTML常用标签"><a href="#2-1-HTML常用标签" class="headerlink" title="2.1 HTML常用标签"></a>2.1 HTML常用标签</h3><ul>
<li>格式化标签<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;hn&gt;...&lt;hn&gt;  其中n为1-6的值。标题标签</span><br><span class="line">&lt;i&gt;斜体&lt;/i&gt;    </span><br><span class="line">&lt;em&gt;强调斜体&lt;/em&gt;</span><br><span class="line">&lt;b&gt;加粗&lt;/b&gt;</span><br><span class="line">&lt;strong&gt;强调加粗&lt;/strong&gt;</span><br><span class="line">&lt;cite&gt;作品的标题(引用)&lt;/cite&gt;</span><br><span class="line">&lt;sub&gt;下标&lt;/sub&gt;</span><br><span class="line">&lt;sup&gt;上标&lt;/sup&gt;</span><br><span class="line">&lt;del&gt;删除线&lt;/del&gt;</span><br><span class="line">&lt;u&gt;u下划线标签&lt;/u&gt;&lt;br/&gt;  &lt;!-- br是换行的意思--&gt;</span><br><span class="line">&lt;u&gt;u下划线标签&lt;/u&gt;&lt;br/&gt;&lt;br/&gt;</span><br><span class="line">&lt;p&gt;换段&lt;/p&gt;</span><br><span class="line">&lt;hr/&gt;水平分割线</span><br><span class="line">&lt;ul&gt;...&lt;/ul&gt; 无序列表</span><br><span class="line">&lt;ol&gt;...&lt;/ol&gt;有序列表， 其中type类型值：Aali1 start属性表示起始值</span><br><span class="line">&lt;li&gt;...&lt;li&gt; 列表项</span><br><span class="line">&lt;div&gt;...&lt;div&gt;常用于组合块级元素，以便通过CSS来对这些元素进行格式化. 非常常用，默认的div标签会自动换行</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;width:600px&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  This is my first website</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  Welcome to visit it</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">爱好：</span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>reading the book<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>surfing the internet<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>climbing the mountain<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>singing a song<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">type</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>reading the book<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>surfing the internet<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>climbing the mountain<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>singing a song<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>图片标签 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;img /&gt; 在网页中插入一张图片</span><br><span class="line">• 属性：</span><br><span class="line">• src： 图片名及url地址</span><br><span class="line">• alt: 图片加载失败时的提示信息</span><br><span class="line">• title：文字提示属性</span><br><span class="line">• width：图片宽度</span><br><span class="line">• height：图片高度</span><br><span class="line">• border：边框线粗细</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;app.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;app&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span>  <span class="comment">&lt;!--- 指定width, height会等比缩放 ---&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://www.google.com/images/branding/googlelogo/1x/googlelogo_color_272x92dp.png&quot;</span> <span class="attr">title</span>=<span class="string">&quot;google 图片&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>超链接标签</li>
</ul>
<h2 id="3-Django框架介绍与安装"><a href="#3-Django框架介绍与安装" class="headerlink" title="3 Django框架介绍与安装"></a>3 Django框架介绍与安装</h2><ul>
<li>如何找到 <a href="http://127.0.0.1:8000/myapp/">http://127.0.0.1:8000/myapp/</a> 该访问路径<br>一旦myweb(项目)下的urs文件被改变，默认的welcome页面就不会再显示</li>
<li>子路由和父路由</li>
</ul>
<h2 id="4-app创建与说明"><a href="#4-app创建与说明" class="headerlink" title="4 app创建与说明"></a>4 app创建与说明</h2><p><img src="/2022/01/07/Django/app.png" alt="img"></p>
<ul>
<li>确保APP已注册（在settings–&gt; INSTALL_APPS: ‘myapp.apps.MyappConfig’)</li>
<li>编写url和视图函数的对应关系(注意是myweb中的urls.py中)<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># www.xxx.com/index/ -&gt; 函数（myapp的views里面）</span></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</span><br><span class="line">path(<span class="string">&#x27;index/&#x27;</span>, views.index) <span class="comment">#只要用户访问上面的url，就会在views.py文件中找index函数并执行该函数</span></span><br></pre></td></tr></table></figure></li>
<li>编写视图函数</li>
<li>启动jango项目</li>
</ul>
<h2 id="5-Django-的URL路由配置"><a href="#5-Django-的URL路由配置" class="headerlink" title="5 Django 的URL路由配置"></a>5 Django 的URL路由配置</h2><p>在urls.py文件中</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&quot;find/&lt;int:sid&gt;&quot;</span>, views.find), <span class="comment">#在find/后加上任意整数进行访问， views中的find 函数需要有sid</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#在views中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">request, sid</span>):</span></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&quot;find....%d&quot;</span>%(sid))</span><br><span class="line"></span><br><span class="line">path(<span class="string">&quot;find/&lt;int:sid&gt;/&lt;str:name&gt;&quot;</span>, views.find2)</span><br><span class="line"></span><br><span class="line"><span class="comment">#在views中</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find2</span>(<span class="params">request, sid, name</span>):</span></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&quot;find2....%d:%s&quot;</span>%(sid,name))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find</span>(<span class="params">request, sid=<span class="number">0</span>, name=<span class="string">&quot;&quot;</span></span>):</span>  <span class="comment">#加入默认值， 不传参数也可以访问</span></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&quot;find2....%d:%s&quot;</span>%(sid,name))</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过浏览器访问服务：<br>  127.0.0.1：8000/index–&gt; root url(根路由)–&gt;加载子路由（myweb/urls.py)–&gt;正则匹配访问路径（path)–&gt;视图函数（views.index)–&gt; views.py index()响应内容</p>
</blockquote>
<ul>
<li>什么是根路由，什么是子路由？<blockquote>
<pre><code>s
</code></pre>
</blockquote>
</li>
</ul>
<p>如果在每一个app中创建子路由，则：</p>
<ol>
<li>在myapp中创建urls.py文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views <span class="comment"># . represents the currecnt dir</span></span><br><span class="line">urlpatterns=[path(<span class="string">&quot;myapp/&quot;</span>, views.urls)]</span><br></pre></td></tr></table></figure></li>
<li>更改myweb中的urls.py文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line">ulspatterns =[</span><br><span class="line">  path(<span class="string">&quot;&quot;</span>, include(<span class="string">&#x27;myapp.urls&#x27;</span>)), <span class="comment">#在当前总路由文件路由中导入子路由文件</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-1-跳转-重定向"><a href="#5-1-跳转-重定向" class="headerlink" title="5.1 跳转/重定向"></a>5.1 跳转/重定向</h3><ul>
<li>根据路由名称反向生成url请求地址</li>
</ul>
<ol>
<li>在urls.py中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlspatterns=[</span><br><span class="line">  path(<span class="string">&quot;&quot;</span>, views.index, name=<span class="string">&quot;index&quot;</span>),  <span class="comment">#该name可以帮助反向生成前面的url地址</span></span><br><span class="line">  path(<span class="string">&quot;add/&quot;</span>, views.add, name=<span class="string">&quot;add&quot;</span>),</span><br><span class="line">  path(<span class="string">&quot;find/&lt;int: sid&gt;/&lt;str: name&gt;/&quot;</span>, views.find),  </span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li>在views.py中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">  <span class="built_in">print</span>(reverse(<span class="string">&quot;index&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(reverse(<span class="string">&quot;find&quot;</span>, args=(<span class="number">100</span>,<span class="string">&#x27;elaine&#x27;</span>)))  </span><br><span class="line">  <span class="keyword">return</span> HttpReponse(<span class="string">&quot;Hello world&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ol>
<ul>
<li>跳转/重定向<br>在views.py文件中<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> redirect</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">  <span class="keyword">return</span> redirect(reverse(<span class="string">&quot;find&quot;</span>, args=(<span class="number">100</span>,<span class="string">&#x27;elaine&#x27;</span>)))  <span class="comment"># 执行浏览器重定向（页面跳转）</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="6-模板和静态文件"><a href="#6-模板和静态文件" class="headerlink" title="6 模板和静态文件"></a>6 模板和静态文件</h2><h3 id="6-1-模板"><a href="#6-1-模板" class="headerlink" title="6.1 模板"></a>6.1 模板</h3><p>在myapp中的views.py文件做如下修改:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user_list</span>(<span class="params">request</span>):</span></span><br><span class="line">  <span class="comment"># 在app的目录下的templates寻找user_list.html(根据app的注册顺序，逐一去他们的templates目录中寻找)</span></span><br><span class="line">  <span class="keyword">return</span> render(request, <span class="string">&quot;user_list.html&quot;</span>)  <span class="comment">#在render内部会找到该文件并读取</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>在对应的APP下面写templates,并在其中添加文件(add.html, user_list.html, etc).</p>
</blockquote>
<h3 id="6-2-静态文件"><a href="#6-2-静态文件" class="headerlink" title="6.2 静态文件"></a>6.2 静态文件</h3><p>在开发过程中，一般将：</p>
<ul>
<li>图片</li>
<li>CSS</li>
<li>js</li>
</ul>
<p>都当做静态文件处理。</p>
<blockquote>
<p>必须在当前的app(myapp)中新建static文件夹，并将图片放入其中.而在static文件夹下面，一般需要css, img, js, plugins</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--插入图片--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;/static/img/1.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--jango推荐写法--&gt;</span></span><br><span class="line">&#123;% load static %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% static &#x27;plugins/bootstrap-3.4.1/css/bootstrap.css&#x27; %&#125;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&#123;% static &#x27;img/1.png&#x27; %&#125;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="7-Django的模型层"><a href="#7-Django的模型层" class="headerlink" title="7 Django的模型层"></a>7 Django的模型层</h2><ol>
<li>创建project<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">django-admin startproject mydemo</span><br></pre></td></tr></table></figure></li>
<li>进入创建的project的dir, 创建app<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 manage.py startapp myapp</span><br></pre></td></tr></table></figure></li>
<li>准备数据库（使用sudo -u postgres psql进入数据库）<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 创建名为myapp的数据库</span><br><span class="line"> CREATE DATABASE mydb; </span><br><span class="line"> # 创建用户名和密码</span><br><span class="line"> CREATE USER myuser WITH ENCRYPTED PASSWORD &#x27;mypass&#x27;; </span><br><span class="line"> # 给创建的用户授权</span><br><span class="line"> GRANT ALL PRIVILEGES ON DATABASE mydb TO myuser;</span><br><span class="line"></span><br><span class="line"> # 以下设置可手动进行设置，也可以在postgresql.conf中进行配置</span><br><span class="line"> # 设置客户端字符为utf-8，防止乱码</span><br><span class="line"> ALTER ROLE myuser SET client_encoding TO &#x27;utf8&#x27;;</span><br><span class="line"> # 事务相关设置 - 推荐</span><br><span class="line"> ALTER ROLE myuser SET default_transaction_isolation TO &#x27;read committed&#x27;;</span><br><span class="line"> # 设置数据库时区为UTC - 推荐</span><br><span class="line"> ALTER ROLE myuser SET timezone TO &#x27;UTC&#x27;;</span><br></pre></td></tr></table></figure></li>
<li>将创建的app名加入INSTALLED_APPS<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS=[<span class="string">&#x27;myapp&#x27;</span>]</span><br></pre></td></tr></table></figure></li>
<li>数据库连接配置，修改配置文件settings.py<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line"> <span class="string">&#x27;default&#x27;</span>: &#123;</span><br><span class="line">     <span class="string">&#x27;ENGINE&#x27;</span>: <span class="string">&#x27;django.db.backends.postgresql_psycopg2&#x27;</span>,   <span class="comment"># 数据库引擎</span></span><br><span class="line">     <span class="string">&#x27;NAME&#x27;</span>: <span class="string">&#x27;mysite&#x27;</span>,         <span class="comment"># 数据库名，Django不会帮你创建，需要自己进入数据库创建。</span></span><br><span class="line">     <span class="string">&#x27;USER&#x27;</span>: <span class="string">&#x27;elaine&#x27;</span>,     <span class="comment"># 设置的数据库用户名</span></span><br><span class="line">     <span class="string">&#x27;PASSWORD&#x27;</span>: <span class="string">&#x27;passcode&#x27;</span>,     <span class="comment"># 设置的密码</span></span><br><span class="line">     <span class="string">&#x27;HOST&#x27;</span>: <span class="string">&#x27;localhost&#x27;</span>,    <span class="comment"># 本地主机或数据库服务器的ip</span></span><br><span class="line">     <span class="string">&#x27;PORT&#x27;</span>: <span class="string">&#x27;&#x27;</span>,         <span class="comment"># 数据库使用的端口</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li>
<li>在models里面定义model类<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Uers</span>(<span class="params">models.Model</span>):</span>  <span class="comment">#该user继承了django中的db里面的Models类</span></span><br><span class="line">   name=models.CharField(max_length=<span class="number">32</span>)  <span class="comment">#每一个属性代表一个字段，每一个字段代表定义的类型. char 代表字符串类型（告诉数据表，name是char类型）</span></span><br><span class="line">   age= models.IntegerField(default=<span class="number">22</span>) </span><br><span class="line">   phone=models.CharField(max_length=<span class="number">16</span>)</span><br><span class="line">   addtime=models.DateTimeField(default=datetime.now)</span><br></pre></td></tr></table></figure></li>
<li>执行以下两条指令， 若均不报错，则配置成功<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 manage.py makemigrations #若models没有更改则会显示no changes detected</span><br><span class="line">python3 manage.py migrate</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="7-1-模型实例"><a href="#7-1-模型实例" class="headerlink" title="7.1 模型实例"></a>7.1 模型实例</h3><ol>
<li>配置路由文件<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在urls文件中</span></span><br><span class="line"><span class="keyword">from</span> myapp <span class="keyword">import</span> views</span><br><span class="line">urlpatterns=[</span><br><span class="line">  path(<span class="string">&quot;&quot;</span>, views.index,name=<span class="string">&quot;index&quot;</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
<li>在views文件中写入相应函数<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在views文件中</span></span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> myapp.models <span class="keyword">import</span> Users</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span>(<span class="params">request</span>):</span></span><br><span class="line">  <span class="comment"># 执行model操作</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 添加操作</span></span><br><span class="line">  ob = Users() <span class="comment"># User实例化新的对象(空对象)</span></span><br><span class="line">  ob.name = <span class="string">&quot;Elaine&quot;</span></span><br><span class="line">  ob.age=<span class="number">20</span></span><br><span class="line">  ob.phone=<span class="string">&quot;576&quot;</span></span><br><span class="line">  ob.save()  <span class="comment">#新对象就是添加数据，已存在对象就是修改</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 删除操作</span></span><br><span class="line">  mod = Users.objects <span class="comment">#获取User的model对象</span></span><br><span class="line">  user = mod.get(<span class="built_in">id</span>=<span class="number">1</span>) <span class="comment">#获取ID值为1的数据信息</span></span><br><span class="line">  user.delete()  <span class="comment">#执行删除操作</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">#修改操作</span></span><br><span class="line">  ob = Users.objects.get(<span class="built_in">id</span>=<span class="number">1</span>)</span><br><span class="line">  <span class="built_in">print</span>(ob.name)  <span class="comment">#输出到终端</span></span><br><span class="line">  ob.name = <span class="string">&quot;lpr&quot;</span></span><br><span class="line">  ob.age = <span class="number">22</span></span><br><span class="line">  ob.save()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> HttpResponse(<span class="string">&quot;首页&quot;</span>)  <span class="comment">#显示在网页中</span></span><br></pre></td></tr></table></figure>
<font color=red>如果写入ob.save()则会报500错误？？</font></li>
</ol>
<blockquote>
<p>数据库配置不当导致。（原因？）<br>解决方法：新建新的数据库：使用python3 manage.py makemigrations和python3 manage.py migrate</p>
</blockquote>
<h3 id="7-2-模型查询"><a href="#7-2-模型查询" class="headerlink" title="7. 2 模型查询"></a>7. 2 模型查询</h3><ul>
<li>返回查询集的方法，称为过滤器<ul>
<li>all()</li>
<li>filter()</li>
<li>exclude()</li>
<li>order_by()</li>
<li>values():一个对象构成一个字典，然后构成一个列表返回</li>
</ul>
</li>
<li>写法<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">  <span class="built_in">filter</span>(key1=value1, key2=value2) <span class="keyword">or</span></span><br><span class="line">  <span class="built_in">filter</span>(key1=value1)</span><br><span class="line">  <span class="built_in">filter</span>(key2=value2)</span><br><span class="line">``` python</span><br><span class="line">mod = Users.objects</span><br><span class="line">ulist = mod.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> ulist:</span><br><span class="line">  <span class="built_in">print</span>(u.<span class="built_in">id</span>, u.name, u.age)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;首页&quot;</span>)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mod = Users.objects</span><br><span class="line">fil = mod.<span class="built_in">filter</span>(name=<span class="string">&#x27;lpr&#x27;</span>)</span><br><span class="line">fil1 = mod.<span class="built_in">filter</span>(age__gt=<span class="number">20</span>)  <span class="comment">#获取所有age大于20的信息</span></span><br><span class="line">fil2 = mod.<span class="built_in">filter</span>(age__gte=<span class="number">20</span>) <span class="comment">#获取所有age&gt;=20的信息</span></span><br><span class="line">fil3 = mod.order_by(<span class="string">&quot;age&quot;</span>)   <span class="comment">#age按照从小到大排序</span></span><br><span class="line">fil4 = mod.order_by(<span class="string">&quot;age&quot;</span>)[:<span class="number">3</span>]  <span class="comment">#只取前三个数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> u <span class="keyword">in</span> fil:</span><br><span class="line">  <span class="built_in">print</span>(u.<span class="built_in">id</span>, u.name, u.age)</span><br><span class="line"><span class="keyword">return</span> HttpResponse(<span class="string">&quot;首页&quot;</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="8-Django视图层"><a href="#8-Django视图层" class="headerlink" title="8 Django视图层"></a>8 Django视图层</h2><p>一、 URLS: admin path(‘admin/‘, admin.site.urls),<br>问题：<br>加载不出静态文件<br>static文件夹位置和template文件夹位置，都应放在相应的app下面</p>
<h3 id="8-1-相应json数据格式"><a href="#8-1-相应json数据格式" class="headerlink" title="8.1 相应json数据格式"></a>8.1 相应json数据格式</h3><p>在views.py中:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Myview</span>(<span class="params">View</span>):</span></span><br><span class="line">	<span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, request, *args, **kwargs</span>):</span></span><br><span class="line">		<span class="keyword">return</span> HttpResponse(<span class="string">&quot;Hello Views!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resp05</span>(<span class="params">request</span>):</span></span><br><span class="line">	data = [&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1001</span>, <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;elaine&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">20</span>&#125;,</span><br><span class="line">	&#123;<span class="string">&#x27;id&#x27;</span>:<span class="number">1002</span>, <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;Mia&#x27;</span>, <span class="string">&#x27;age&#x27;</span>:<span class="number">22</span>&#125;,]</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> JsonResponse(&#123;<span class="string">&quot;data&quot;</span>:data&#125;)</span><br></pre></td></tr></table></figure>
<p>路由配置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">&#x27;resp04&#x27;</span>, Myview.as_view(), name = <span class="string">&#x27;resp04&#x27;</span>),</span><br></pre></td></tr></table></figure>
<p>在template 下的myapp中的index.html中</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;% url &#x27;resp05&#x27; %&#125;&quot;</span>&gt;</span>4. 相应json数据格式<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>效果： 在 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000/</a> 网址中访问该页面会出现超链接，链接点进去后显示data内容</p>
</blockquote>
<h3 id="8-2-Cookie-的使用"><a href="#8-2-Cookie-的使用" class="headerlink" title="8.2 Cookie 的使用"></a>8.2 Cookie 的使用</h3> <figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">resp06</span>(<span class="params">request</span>):</span></span><br><span class="line"><span class="comment">#获取当前的相应对象</span></span><br><span class="line">response = HttpResponse(<span class="string">&#x27;cookie 的设置&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#使用相应对象进行cookie设置</span></span><br><span class="line">response.set_cookie(<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;abc&#x27;</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">#返回相应对象</span></span><br><span class="line"><span class="keyword">return</span> response</span><br></pre></td></tr></table></figure>

<ul>
<li>获取cookie<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(request.COOKIES.get(<span class="string">&#x27;a&#x27;</span>, <span class="literal">None</span>))</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
      <tags>
        <tag>Django</tag>
      </tags>
  </entry>
</search>
